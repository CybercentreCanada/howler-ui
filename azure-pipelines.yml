trigger:
  branches:
    include:
      - main
      - develop
      - rc/*
      - patch/*

pr:
  branches:
    include:
      - main
      - develop
      - rc/*
      - patch/*

variables:
  imageRepository: 'cccs/hogwarts/howler-ui-public'
  containerRegistry: 'uchimera'
  dockerfilePath: '$(Build.sourcesDirectory)/docker/Dockerfile'
  buildId: '$(Build.BuildId)'
  branch: '$(Build.SourceBranchName)'
  isDevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  repoName: 'howler-ui'
  isPrBranch: $[eq(variables['Build.SourceBranchName'], 'merge')]

pool: 'stratus-build-pool.u'

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: BuildAndTestSource
        displayName: Build And Test Source
        steps:
          - script: |
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              nvm install lts/gallium
              npm install -g yarn
              echo isPrBranch: $(isPrBranch)
              yarn install
              export REACT_APP_BRANCH=$(branch)
              export REACT_APP_COMMIT_HASH=$(Build.SourceVersion)
              yarn run build
              # yarn test -- --coverage
            displayName: 'npm install, build and test'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build directory'
            inputs:
              PathtoPublish: '$(Build.sourcesDirectory)/build'
              ArtifactName: 'build'
              publishLocation: 'Container'
          # - task: PublishCodeCoverageResults@1
          #   inputs:
          #     #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
          #     summaryFileLocation: "$(Build.sourcesDirectory)/coverage/lcov-report/index.html"
          #     reportDirectory: "$(Build.sourcesDirectory)/coverage/lcov-report"
      - job: BuildDockerDeployment
        displayName: Build Docker Deployment
        dependsOn: BuildAndTestSource
        condition: eq(variables.isPrBranch, false)
        steps:
          - script: |
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              REPO_NAME=$(repoName)
              FULL_BRANCH=$(Build.SourceBranch)
              BRANCH=${FULL_BRANCH:11}
              VERSION=$(chappie version $REPO_NAME $BRANCH -c)
              echo branchName: ${BRANCH}
              echo version: $VERSION
              echo "##vso[task.setvariable variable=version]$VERSION"
            displayName: 'Extract version'
          - bash: |
              COMMIT=$(Build.SourceVersion)
              COMMIT_SHORT=${COMMIT:0:7}
              SOURCE_DIR=$(Build.SourcesDirectory)
              echo commit: $COMMIT
              echo commitShort: $COMMIT_SHORT
              echo "##vso[task.setvariable variable=commitShort]$COMMIT_SHORT"
            displayName: 'Extract commit short sha.'
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'build'
              downloadPath: '$(Build.SourcesDirectory)/docker'
          - task: Docker@2
            displayName: 'Build and push howler_ui docker image.'
            inputs:
              command: 'buildAndPush'
              repository: $(imageRepository)
              containerRegistry: $(containerRegistry)
              tags: |
                $(branch)
                $(version)_$(branch)
                $(version)_$(branch)_$(commitShort)
